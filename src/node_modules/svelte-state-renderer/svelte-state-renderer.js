import merge from 'deepmerge'

export default (defaultOptions = {}) => stateRouter => {
  const { props: defaultProps } = defaultOptions

  const asr = {
    makePath: stateRouter.makePath,
    stateIsActive: stateRouter.stateIsActive,
  }

  const render = async context => {
    const { element: target, template, content } = context

    const rendererSuppliedOptions = {
      ...defaultOptions,
      target,
      // props: Object.assign(content, defaultOptions.props, { asr }),
      props: { ...content, ...defaultProps, asr },
    }

    const construct = async (getComponent, options) => {
      const { default: Component } = await getComponent()
      return new Component(options)
    }

    let svelte

    if (typeof template === `function`) {
      svelte = await construct(template, rendererSuppliedOptions)
    } else {
      const options = merge(rendererSuppliedOptions, template.options)
      svelte = await construct(template.component, options)
    }

    function onRouteChange() {
      svelte.$set({ asr })
    }

    stateRouter.on(`stateChangeEnd`, onRouteChange)

    svelte.asrOnDestroy = () =>
      stateRouter.removeListener(`stateChangeEnd`, onRouteChange)

    svelte.mountedToTarget = target

    return svelte
  }

  return {
    render,
    reset: function reset(context, cb) {
      const svelte = context.domApi
      const element = svelte.mountedToTarget

      svelte.asrOnDestroy()
      svelte.$destroy()

      const renderContext = Object.assign({ element }, context)

      render(renderContext, cb)
    },
    destroy: function destroy(svelte, cb) {
      svelte.asrOnDestroy()
      svelte.$destroy()
      cb()
    },
    getChildElement(svelte) {
      const element = svelte.mountedToTarget
      const child = element.querySelector(`uiView`)
      debugger
      return child
    },
  }
}
